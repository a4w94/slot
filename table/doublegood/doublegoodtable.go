package table

import (
	"fmt"
	info "info/doublegood"
	"os"
	"runtime"
	"strconv"

	"github.com/Luxurioust/excelize"
)

var (
	NGStriTablertp95  [reelamount][]int
	NGStriTablertp965 [reelamount][]int
	NGStriTablertp99  [reelamount][]int

	FGStriTablertp95  [reelamount][]int
	FGStriTablertp965 [reelamount][]int
	FGStriTablertp99  [reelamount][]int
)

type NGTable struct {
	NGStriTablertp95  [reelamount][]int
	NGStriTablertp965 [reelamount][]int
	NGStriTablertp98  [reelamount][]int
	NGStriTablertp99  [reelamount][]int

	NGComboStatistic [symbolamount][comboresultnum]int
}

type FGTable struct {
	FGStriTablertp95  [reelamount][]int
	FGStriTablertp965 [reelamount][]int
	FGStriTablertp98  [reelamount][]int
	FGStriTablertp99  [reelamount][]int

	FGWeightTable    [][]int
	FGComboStatistic [symbolamount][comboresultnum]int
}

type BGTable struct {
	BGStriTable [][]int

	BGWeightTable    [][]int
	BGComboStatistic [symbolamount][comboresultnum]int
}

type PublicTable struct {
	PayTable      [][]int
	LineTable     [][]int
	TotalTable    [symbolamount][comboresultnum]int
	MultipleTalbe []int
}

///獎圖總數+1///
const symbolamount = info.Symbolamount

///combo數目0~5combo///
const comboresultnum = info.Comboresultnum

const reelamount = info.Reelamount

func PublicTablefunc() PublicTable {

	// fmt.Println("use public table")
	// fmt.Println("誰在調用", PrintCallfuncName())
	// fmt.Println()
	var Public = PublicTable{}

	/// 派彩表 對應0~5combo///
	Public.PayTable = [][]int{
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},

		{0, 0, 0, 10, 20, 75, 210, 600, 1500, 3000, 15000}, ///M1
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},

		{0, 0, 0, 8, 15, 50, 180, 450, 900, 1500, 6000}, ///M2
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},

		{0, 0, 0, 8, 15, 40, 150, 360, 600, 900, 3000}, ///M3
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},

		{0, 0, 0, 8, 15, 40, 150, 360, 600, 900, 3000}, ///M4
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},

		{0, 0, 0, 5, 10, 30, 90, 210, 300, 450, 1500}, ///A
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},

		{0, 0, 0, 5, 10, 30, 90, 210, 300, 450, 1500}, ///K
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},

		{0, 0, 0, 5, 8, 15, 60, 150, 240, 360, 900}, ///Q
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},

		{0, 0, 0, 5, 8, 15, 60, 150, 240, 360, 900}, ///J
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},

		{0, 0, 0, 5, 8, 15, 60, 150, 240, 360, 900}, ///TE
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},

		{0, 0, 0, 5, 8, 15, 60, 150, 240, 360, 900}, ///NI
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},

		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, ///wild
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, ///scatter
	}

	Public.LineTable = [][]int{
		{1, 1, 1, 1, 1},
		{0, 0, 0, 0, 0},
		{2, 2, 2, 2, 2},
		{0, 1, 2, 1, 0},
		{2, 1, 0, 1, 2},

		{1, 0, 0, 0, 1},
		{1, 2, 2, 2, 1},
		{0, 0, 1, 2, 2},
		{2, 2, 1, 0, 0},
		{1, 2, 1, 0, 1},

		{1, 0, 1, 2, 1},
		{0, 1, 1, 1, 0},
		{2, 1, 1, 1, 2},
		{0, 1, 0, 1, 0},
		{2, 1, 2, 1, 2},

		{1, 1, 0, 1, 1},
		{1, 1, 2, 1, 1},
		{0, 0, 2, 0, 0},
		{2, 2, 0, 2, 2},
		{0, 2, 2, 2, 0},

		{2, 0, 0, 0, 2},
		{1, 2, 0, 2, 1},
		{1, 0, 2, 0, 1},
		{0, 2, 0, 2, 0},
		{2, 0, 2, 0, 2},

		{0, 2, 1, 0, 2},
		{2, 0, 1, 2, 0},
		{1, 0, 2, 1, 2},
		{0, 2, 1, 2, 0},
		{2, 1, 0, 0, 1},
	}
	Public.TotalTable = [symbolamount][comboresultnum]int{}

	Public.MultipleTalbe = make([]int, len(info.Multiple)+1)

	return Public
}

type Point struct {
	NGtabl [][]int
}

func (m *Point) NGTablepoint() {
	m.NGtabl = [][]int{
		{2, 18, 16, 10, 14, 12, 19, 19, 15, 10, 19, 19, 23, 15, 19, 3, 19, 19, 23, 15, 17, 8, 20, 19, 2, 9, 16, 3, 10, 19, 6, 10, 15, 8, 19, 19, 2, 11, 15, 4, 13, 13, 15, 5, 11, 7, 9, 1, 15, 19, 19, 3, 11, 11, 5, 9, 9, 7, 19, 19, 1, 9, 9, 3, 14, 14, 5, 19, 19, 7, 11, 9, 1, 19, 9, 3, 14, 19, 5, 9, 11, 7, 19, 19, 1, 9, 9, 3, 11, 11, 5, 19, 19, 7, 9, 9, 2, 18, 16, 3, 11, 12, 5, 14, 15, 8, 19, 19, 23, 15, 13, 23, 10, 9, 23, 15, 17, 7, 20, 19, 1, 10, 15, 4, 10, 9, 5, 10, 15, 8, 19, 19, 1, 11, 15, 4, 11, 11, 5, 15, 11, 8, 9, 15, 1, 19, 19, 3, 11, 11, 6, 9, 9, 8, 19, 19, 1, 9, 9, 4, 11, 11, 6, 19, 19, 8, 11, 9, 1, 19, 9, 4, 11, 19, 6, 9, 11, 7, 19, 19, 1, 9, 9, 4, 11, 11, 6, 19, 19, 7, 9, 9},

		{4, 13, 17, 4, 13, 12, 4, 18, 17, 18, 16, 18, 23, 9, 11, 11, 10, 9, 23, 18, 21, 23, 18, 18, 3, 19, 18, 3, 15, 12, 6, 14, 15, 13, 13, 6, 13, 7, 13, 4, 15, 18, 6, 17, 17, 7, 15, 13, 17, 17, 15, 6, 17, 17, 6, 13, 17, 7, 13, 13, 7, 13, 17, 7, 17, 17, 5, 13, 15, 13, 13, 15, 5, 13, 13, 7, 17, 17, 5, 13, 13, 7, 13, 13, 2, 17, 17, 5, 13, 13, 5, 13, 13, 7, 17, 17, 2, 13, 17, 1, 13, 17, 22, 13, 13, 8, 16, 12, 23, 20, 11, 23, 15, 19, 23, 20, 17, 23, 10, 13, 21, 17, 17, 3, 15, 17, 6, 14, 13, 8, 15, 6, 9, 8, 9, 4, 15, 13, 6, 17, 17, 8, 15, 13, 6, 9, 15, 6, 17, 17, 6, 15, 17, 8, 13, 13, 8, 15, 9, 8, 17, 17, 6, 13, 15, 9, 9, 15, 6, 13, 13, 7, 17, 17, 6, 9, 9, 7, 13, 13, 2, 17, 17, 6, 9, 9, 5, 13, 13, 7, 17, 17},

		{2, 9, 4, 13, 8, 20, 6, 13, 8, 19, 2, 20, 23, 14, 10, 19, 19, 19, 2, 13, 10, 8, 9, 5, 13, 7, 19, 22, 9, 10, 19, 2, 19, 21, 11, 2, 16, 6, 16, 4, 20, 15, 11, 18, 15, 7, 17, 15, 2, 11, 15, 4, 12, 15, 8, 12, 15, 8, 12, 11, 2, 20, 20, 4, 11, 11, 6, 19, 19, 8, 11, 11, 2, 19, 19, 4, 11, 11, 6, 19, 19, 8, 11, 11, 2, 19, 19, 3, 11, 11, 5, 19, 7, 19, 6, 11, 2, 12, 19, 22, 12, 20, 22, 11, 19, 8, 12, 16, 23, 14, 16, 23, 19, 16, 1, 13, 16, 8, 12, 19, 22, 11, 19, 21, 11, 19, 4, 10, 16, 8, 9, 16, 2, 20, 16, 4, 20, 15, 8, 18, 15, 8, 17, 15, 2, 12, 15, 4, 12, 15, 8, 12, 15, 8, 12, 11, 2, 20, 20, 4, 11, 11, 6, 19, 19, 8, 11, 11, 2, 19, 19, 4, 11, 11, 6, 19, 19, 8, 11, 11, 2, 19, 19, 4, 11, 11, 6, 19, 19, 8, 11, 11},

		{2, 12, 12, 21, 17, 18, 21, 10, 17, 22, 16, 14, 23, 12, 15, 22, 14, 15, 22, 11, 15, 22, 14, 17, 9, 14, 17, 15, 19, 10, 8, 18, 15, 20, 13, 15, 6, 14, 14, 22, 13, 16, 22, 17, 17, 22, 17, 16, 6, 14, 16, 22, 17, 13, 6, 14, 14, 5, 17, 17, 22, 14, 14, 22, 17, 13, 6, 17, 13, 4, 17, 13, 21, 17, 13, 4, 17, 6, 13, 22, 13, 13, 2, 17, 13, 22, 13, 4, 17, 6, 13, 22, 13, 7, 17, 17, 22, 13, 17, 22, 13, 18, 22, 13, 17, 22, 16, 14, 23, 12, 10, 22, 17, 15, 5, 11, 15, 4, 14, 17, 21, 14, 17, 4, 19, 15, 22, 20, 15, 22, 9, 15, 22, 14, 16, 22, 14, 16, 22, 17, 16, 3, 17, 16, 22, 14, 16, 4, 17, 17, 6, 14, 14, 4, 17, 17, 6, 14, 14, 4, 17, 17, 6, 13, 13, 4, 17, 17, 2, 13, 13, 4, 17, 17, 6, 13, 13, 4, 17, 17, 1, 13, 13, 4, 17, 17, 6, 13, 13, 8, 17, 17},

		{1, 14, 11, 21, 19, 17, 22, 10, 18, 21, 18, 16, 23, 15, 17, 18, 17, 15, 23, 20, 19, 23, 15, 18, 23, 11, 15, 23, 12, 11, 14, 14, 19, 22, 19, 15, 1, 13, 16, 3, 14, 15, 5, 11, 16, 7, 13, 16, 1, 17, 16, 4, 13, 15, 6, 11, 11, 8, 19, 19, 1, 13, 6, 13, 3, 17, 6, 19, 19, 7, 17, 17, 22, 13, 6, 13, 3, 11, 6, 19, 19, 7, 17, 1, 17, 8, 19, 22, 13, 13, 6, 11, 11, 7, 13, 13, 22, 14, 11, 21, 19, 17, 22, 13, 18, 8, 18, 9, 23, 16, 10, 23, 17, 15, 23, 20, 19, 23, 15, 18, 23, 11, 15, 23, 12, 11, 23, 15, 19, 22, 19, 15, 2, 13, 16, 4, 13, 16, 6, 11, 16, 8, 13, 16, 2, 17, 16, 4, 13, 15, 6, 11, 11, 8, 19, 19, 2, 13, 13, 4, 17, 17, 6, 19, 19, 8, 17, 17, 2, 13, 13, 4, 11, 11, 6, 19, 19, 8, 17, 17, 2, 19, 19, 4, 13, 13, 5, 11, 11, 8, 13, 13},
	}

}
func NGTablefunc() NGTable {
	//xlsx, err := excelize.OpenFile("/Users/terry_hsiesh/go/game/doublegood/parsheet/ngparsheet.xlsx")

	// fmt.Println("ng useexcel")
	// fmt.Println("誰在調用", PrintCallfuncName(), PrintCallfuncNameUpper())
	// fmt.Println()
	// if err != nil {
	// 	fmt.Println(err)
	// 	os.Exit(1)
	// }

	var NGresult = NGTable{}

	///NG轉輪表ＲＴＰ95///
	//NGresult.NGStriTablertp95 = Getexcelparsheet(xlsx, "95")
	NGresult.NGStriTablertp95 = [reelamount][]int{
		{2, 18, 16, 10, 14, 12, 19, 19, 15, 10, 19, 19, 23, 15, 19, 3, 19, 19, 23, 15, 17, 8, 20, 19, 2, 9, 16, 3, 10, 19, 6, 10, 15, 8, 19, 19, 2, 11, 15, 4, 13, 13, 15, 5, 11, 7, 9, 1, 15, 19, 19, 3, 11, 11, 5, 9, 9, 7, 19, 19, 1, 9, 9, 3, 14, 14, 5, 19, 19, 7, 11, 9, 1, 19, 9, 3, 14, 19, 5, 9, 11, 7, 19, 19, 1, 9, 9, 3, 11, 11, 5, 19, 19, 7, 9, 9, 2, 18, 16, 3, 11, 12, 5, 14, 15, 8, 19, 19, 23, 15, 13, 23, 10, 9, 23, 15, 17, 7, 20, 19, 1, 10, 15, 4, 10, 9, 5, 10, 15, 8, 19, 19, 1, 11, 15, 4, 11, 11, 5, 15, 11, 8, 9, 15, 1, 19, 19, 3, 11, 11, 6, 9, 9, 8, 19, 19, 1, 9, 9, 4, 11, 11, 6, 19, 19, 8, 11, 9, 1, 19, 9, 4, 11, 19, 6, 9, 11, 7, 19, 19, 1, 9, 9, 4, 11, 11, 6, 19, 19, 7, 9, 9},

		{4, 13, 17, 4, 13, 12, 4, 18, 17, 18, 16, 18, 23, 9, 11, 11, 10, 9, 23, 18, 21, 23, 18, 18, 3, 19, 18, 3, 15, 12, 6, 14, 15, 13, 13, 6, 13, 7, 13, 4, 15, 18, 6, 17, 17, 7, 15, 13, 17, 17, 15, 6, 17, 17, 6, 13, 17, 7, 13, 13, 7, 13, 17, 7, 17, 17, 5, 13, 15, 13, 13, 15, 5, 13, 13, 7, 17, 17, 5, 13, 13, 7, 13, 13, 2, 17, 17, 5, 13, 13, 5, 13, 13, 7, 17, 17, 2, 13, 17, 1, 13, 17, 22, 13, 13, 8, 16, 12, 23, 20, 11, 23, 15, 19, 23, 20, 17, 23, 10, 13, 21, 17, 17, 3, 15, 17, 6, 14, 13, 8, 15, 6, 9, 8, 9, 4, 15, 13, 6, 17, 17, 8, 15, 13, 6, 9, 15, 6, 17, 17, 6, 15, 17, 8, 13, 13, 8, 15, 9, 8, 17, 17, 6, 13, 15, 9, 9, 15, 6, 13, 13, 7, 17, 17, 6, 9, 9, 7, 13, 13, 2, 17, 17, 6, 9, 9, 5, 13, 13, 7, 17, 17},

		{2, 9, 4, 13, 8, 20, 6, 13, 8, 19, 2, 20, 23, 14, 10, 19, 19, 19, 2, 13, 10, 8, 9, 5, 13, 7, 19, 22, 9, 10, 19, 2, 19, 21, 11, 2, 16, 6, 16, 4, 20, 15, 11, 18, 15, 7, 17, 15, 2, 11, 15, 4, 12, 15, 8, 12, 15, 8, 12, 11, 2, 20, 20, 4, 11, 11, 6, 19, 19, 8, 11, 11, 2, 19, 19, 4, 11, 11, 6, 19, 19, 8, 11, 11, 2, 19, 19, 3, 11, 11, 5, 19, 7, 19, 6, 11, 2, 12, 19, 22, 12, 20, 22, 11, 19, 8, 12, 16, 23, 14, 16, 23, 19, 16, 1, 13, 16, 8, 12, 19, 22, 11, 19, 21, 11, 19, 4, 10, 16, 8, 9, 16, 2, 20, 16, 4, 20, 15, 8, 18, 15, 8, 17, 15, 2, 12, 15, 4, 12, 15, 8, 12, 15, 8, 12, 11, 2, 20, 20, 4, 11, 11, 6, 19, 19, 8, 11, 11, 2, 19, 19, 4, 11, 11, 6, 19, 19, 8, 11, 11, 2, 19, 19, 4, 11, 11, 6, 19, 19, 8, 11, 11},

		{2, 12, 12, 21, 17, 18, 21, 10, 17, 22, 16, 14, 23, 12, 15, 22, 14, 15, 22, 11, 15, 22, 14, 17, 9, 14, 17, 15, 19, 10, 8, 18, 15, 20, 13, 15, 6, 14, 14, 22, 13, 16, 22, 17, 17, 22, 17, 16, 6, 14, 16, 22, 17, 13, 6, 14, 14, 5, 17, 17, 22, 14, 14, 22, 17, 13, 6, 17, 13, 4, 17, 13, 21, 17, 13, 4, 17, 6, 13, 22, 13, 13, 2, 17, 13, 22, 13, 4, 17, 6, 13, 22, 13, 7, 17, 17, 22, 13, 17, 22, 13, 18, 22, 13, 17, 22, 16, 14, 23, 12, 10, 22, 17, 15, 5, 11, 15, 4, 14, 17, 21, 14, 17, 4, 19, 15, 22, 20, 15, 22, 9, 15, 22, 14, 16, 22, 14, 16, 22, 17, 16, 3, 17, 16, 22, 14, 16, 4, 17, 17, 6, 14, 14, 4, 17, 17, 6, 14, 14, 4, 17, 17, 6, 13, 13, 4, 17, 17, 2, 13, 13, 4, 17, 17, 6, 13, 13, 4, 17, 17, 1, 13, 13, 4, 17, 17, 6, 13, 13, 8, 17, 17},

		{1, 14, 11, 21, 19, 17, 22, 10, 18, 21, 18, 16, 23, 15, 17, 18, 17, 15, 23, 20, 19, 23, 15, 18, 23, 11, 15, 23, 12, 11, 14, 14, 19, 22, 19, 15, 1, 13, 16, 3, 14, 15, 5, 11, 16, 7, 13, 16, 1, 17, 16, 4, 13, 15, 6, 11, 11, 8, 19, 19, 1, 13, 6, 13, 3, 17, 6, 19, 19, 7, 17, 17, 22, 13, 6, 13, 3, 11, 6, 19, 19, 7, 17, 1, 17, 8, 19, 22, 13, 13, 6, 11, 11, 7, 13, 13, 22, 14, 11, 21, 19, 17, 22, 13, 18, 8, 18, 9, 23, 16, 10, 23, 17, 15, 23, 20, 19, 23, 15, 18, 23, 11, 15, 23, 12, 11, 23, 15, 19, 22, 19, 15, 2, 13, 16, 4, 13, 16, 6, 11, 16, 8, 13, 16, 2, 17, 16, 4, 13, 15, 6, 11, 11, 8, 19, 19, 2, 13, 13, 4, 17, 17, 6, 19, 19, 8, 17, 17, 2, 13, 13, 4, 11, 11, 6, 19, 19, 8, 17, 17, 2, 19, 19, 4, 13, 13, 5, 11, 11, 8, 13, 13},
	}

	///NG轉輪表ＲＴＰ96.5///

	//NGresult.NGStriTablertp965 = Getexcelparsheet(xlsx, "965")
	NGresult.NGStriTablertp965 = [reelamount][]int{
		{2, 18, 16, 3, 11, 12, 19, 19, 15, 8, 19, 19, 23, 15, 19, 23, 19, 19, 23, 15, 17, 8, 20, 19, 2, 9, 16, 3, 10, 19, 6, 10, 15, 8, 19, 19, 2, 11, 15, 4, 11, 11, 15, 5, 11, 7, 9, 1, 15, 19, 19, 3, 11, 11, 5, 9, 9, 7, 19, 19, 1, 9, 9, 3, 11, 11, 5, 19, 19, 7, 11, 9, 1, 19, 9, 3, 11, 19, 5, 9, 11, 7, 19, 19, 1, 9, 9, 3, 11, 11, 5, 19, 19, 7, 9, 9, 2, 18, 16, 3, 11, 12, 5, 14, 15, 8, 19, 19, 23, 15, 13, 23, 10, 9, 23, 15, 17, 7, 20, 19, 1, 10, 15, 4, 10, 9, 5, 10, 15, 8, 19, 19, 1, 11, 15, 4, 11, 11, 5, 15, 11, 8, 9, 15, 1, 19, 19, 3, 11, 11, 6, 9, 9, 8, 19, 19, 1, 9, 9, 4, 11, 11, 6, 19, 19, 8, 11, 9, 1, 19, 9, 4, 11, 19, 6, 9, 11, 7, 19, 19, 1, 9, 9, 4, 11, 11, 6, 19, 19, 7, 9, 9},

		{4, 13, 17, 4, 13, 17, 4, 13, 17, 13, 16, 13, 23, 9, 13, 23, 13, 9, 23, 18, 17, 23, 17, 13, 3, 17, 13, 3, 15, 17, 6, 14, 15, 13, 13, 6, 13, 7, 13, 4, 15, 13, 6, 17, 17, 7, 15, 13, 17, 17, 15, 6, 17, 17, 6, 13, 17, 7, 13, 13, 7, 13, 17, 7, 17, 17, 5, 13, 15, 13, 13, 15, 5, 13, 13, 7, 17, 17, 5, 13, 13, 7, 13, 13, 2, 17, 17, 5, 13, 13, 5, 13, 13, 7, 17, 17, 2, 13, 17, 1, 13, 17, 22, 13, 13, 8, 16, 12, 23, 20, 11, 23, 15, 19, 23, 18, 17, 23, 10, 13, 21, 17, 17, 3, 15, 17, 6, 14, 13, 8, 15, 6, 9, 8, 9, 4, 15, 13, 6, 17, 17, 8, 15, 13, 6, 9, 15, 6, 17, 17, 6, 15, 17, 8, 13, 13, 8, 15, 9, 8, 17, 17, 6, 13, 15, 9, 9, 15, 6, 13, 13, 7, 17, 17, 6, 9, 9, 7, 13, 13, 2, 17, 17, 6, 9, 9, 5, 13, 13, 7, 17, 17},

		{2, 11, 4, 11, 8, 20, 6, 11, 8, 19, 2, 20, 23, 14, 20, 23, 19, 19, 2, 13, 20, 8, 11, 6, 11, 8, 19, 22, 11, 4, 19, 2, 19, 21, 11, 2, 16, 6, 16, 4, 20, 15, 8, 18, 15, 8, 17, 15, 2, 11, 15, 4, 12, 15, 8, 12, 15, 8, 12, 11, 2, 20, 20, 4, 11, 11, 6, 19, 19, 8, 11, 11, 2, 19, 19, 4, 11, 11, 6, 19, 19, 8, 11, 11, 2, 19, 19, 3, 11, 11, 5, 19, 7, 19, 6, 11, 2, 12, 19, 22, 12, 20, 22, 11, 19, 8, 12, 16, 23, 14, 16, 23, 19, 16, 1, 13, 16, 8, 12, 19, 22, 11, 19, 21, 11, 19, 4, 10, 16, 8, 9, 16, 2, 20, 16, 4, 20, 15, 8, 18, 15, 8, 17, 15, 2, 12, 15, 4, 12, 15, 8, 12, 15, 8, 12, 11, 2, 20, 20, 4, 11, 11, 6, 19, 19, 8, 11, 11, 2, 19, 19, 4, 11, 11, 6, 19, 19, 8, 11, 11, 2, 19, 19, 4, 11, 11, 6, 19, 19, 8, 11, 11},

		{2, 13, 13, 21, 17, 18, 21, 13, 17, 22, 16, 14, 23, 12, 15, 22, 14, 15, 22, 11, 15, 22, 14, 17, 22, 14, 17, 22, 19, 13, 22, 13, 15, 22, 13, 15, 6, 14, 14, 22, 13, 16, 22, 17, 17, 22, 17, 16, 6, 14, 16, 22, 17, 13, 6, 14, 14, 4, 17, 17, 22, 14, 14, 22, 17, 13, 6, 17, 13, 4, 17, 13, 21, 17, 13, 4, 17, 6, 13, 22, 13, 13, 2, 17, 13, 22, 13, 4, 17, 6, 13, 22, 13, 7, 17, 17, 22, 13, 17, 22, 13, 18, 22, 13, 17, 22, 16, 14, 23, 12, 10, 22, 17, 15, 5, 11, 15, 4, 14, 17, 21, 14, 17, 4, 19, 15, 22, 20, 15, 22, 9, 15, 22, 14, 16, 22, 14, 16, 22, 17, 16, 3, 17, 16, 22, 14, 16, 4, 17, 17, 6, 14, 14, 4, 17, 17, 6, 14, 14, 4, 17, 17, 6, 13, 13, 4, 17, 17, 2, 13, 13, 4, 17, 17, 6, 13, 13, 4, 17, 17, 1, 13, 13, 4, 17, 17, 6, 13, 13, 8, 17, 17},

		{1, 14, 11, 21, 19, 17, 22, 13, 18, 21, 18, 16, 23, 15, 17, 23, 17, 15, 23, 20, 19, 23, 15, 18, 23, 11, 15, 23, 12, 11, 6, 15, 19, 22, 19, 15, 1, 13, 16, 3, 13, 16, 5, 11, 16, 7, 13, 16, 1, 17, 16, 4, 13, 15, 6, 11, 11, 8, 19, 19, 1, 13, 6, 13, 3, 17, 6, 19, 19, 7, 17, 17, 22, 13, 6, 13, 3, 11, 6, 19, 19, 7, 17, 1, 17, 8, 19, 22, 13, 13, 6, 11, 11, 7, 13, 13, 22, 14, 11, 21, 19, 17, 22, 13, 18, 8, 18, 9, 23, 16, 10, 23, 17, 15, 23, 20, 19, 23, 15, 18, 23, 11, 15, 23, 12, 11, 23, 15, 19, 22, 19, 15, 2, 13, 16, 4, 13, 16, 6, 11, 16, 8, 13, 16, 2, 17, 16, 4, 13, 15, 6, 11, 11, 8, 19, 19, 2, 13, 13, 4, 17, 17, 6, 19, 19, 8, 17, 17, 2, 13, 13, 4, 11, 11, 6, 19, 19, 8, 17, 17, 2, 19, 19, 4, 13, 13, 5, 11, 11, 8, 13, 13},
	}
	///NG轉輪表ＲＴＰ98///
	//NGresult.NGStriTablertp98 = Getexcelparsheet(xlsx, "98")

	///NG轉輪表ＲＴＰ99///
	//NGresult.NGStriTablertp99 = Getexcelparsheet(xlsx, "99")

	NGresult.NGStriTablertp99 = [reelamount][]int{
		{2, 18, 16, 3, 11, 12, 19, 19, 15, 8, 19, 19, 23, 15, 19, 23, 19, 14, 13, 15, 17, 8, 20, 19, 2, 9, 16, 3, 10, 19, 6, 10, 15, 8, 19, 19, 2, 11, 15, 4, 11, 11, 15, 5, 11, 7, 9, 1, 15, 19, 19, 3, 11, 11, 5, 9, 9, 7, 19, 19, 1, 9, 9, 3, 11, 11, 5, 19, 19, 7, 11, 9, 1, 19, 9, 3, 11, 19, 5, 9, 11, 7, 19, 19, 1, 9, 9, 3, 11, 11, 5, 19, 19, 7, 9, 9, 2, 18, 16, 3, 11, 12, 5, 14, 15, 8, 19, 19, 23, 15, 13, 23, 10, 9, 23, 15, 17, 7, 20, 19, 1, 10, 15, 4, 10, 9, 5, 10, 15, 8, 19, 19, 1, 11, 15, 4, 11, 11, 5, 15, 11, 8, 9, 15, 1, 19, 19, 3, 11, 11, 6, 9, 9, 8, 19, 19, 1, 9, 9, 4, 11, 11, 6, 19, 19, 8, 11, 9, 1, 19, 9, 4, 11, 19, 6, 9, 11, 7, 19, 19, 1, 9, 9, 4, 11, 11, 6, 19, 19, 7, 9, 9},

		{4, 19, 17, 4, 11, 18, 4, 13, 21, 12, 16, 12, 23, 9, 13, 23, 13, 10, 22, 18, 21, 23, 16, 13, 3, 11, 13, 3, 15, 11, 7, 14, 15, 11, 13, 7, 13, 7, 11, 4, 15, 19, 7, 18, 17, 7, 15, 13, 17, 17, 15, 6, 17, 17, 7, 19, 17, 7, 13, 13, 7, 13, 17, 7, 17, 17, 5, 13, 15, 13, 13, 15, 5, 13, 13, 7, 17, 17, 5, 13, 13, 7, 13, 13, 2, 17, 17, 5, 13, 13, 5, 13, 13, 7, 17, 17, 2, 13, 17, 1, 13, 17, 22, 13, 13, 8, 16, 12, 23, 20, 11, 23, 15, 19, 23, 18, 17, 23, 10, 13, 21, 17, 17, 3, 15, 17, 6, 14, 13, 8, 15, 6, 10, 8, 9, 4, 15, 13, 6, 17, 17, 8, 15, 13, 6, 9, 15, 6, 17, 17, 6, 15, 17, 8, 13, 13, 8, 15, 9, 8, 17, 17, 6, 13, 15, 9, 9, 15, 6, 13, 13, 7, 17, 17, 6, 9, 9, 7, 13, 13, 2, 17, 17, 6, 9, 9, 5, 13, 13, 7, 17, 17},

		{2, 18, 5, 14, 9, 20, 7, 11, 8, 19, 2, 20, 22, 14, 20, 23, 19, 19, 5, 13, 20, 9, 21, 7, 14, 8, 19, 22, 18, 5, 19, 2, 19, 21, 11, 2, 16, 7, 16, 5, 20, 15, 8, 18, 15, 8, 17, 15, 2, 11, 15, 5, 12, 15, 8, 12, 15, 10, 12, 11, 2, 20, 20, 4, 11, 11, 7, 19, 19, 10, 11, 11, 2, 19, 19, 4, 11, 11, 6, 19, 19, 8, 11, 11, 2, 19, 19, 3, 11, 11, 5, 19, 7, 19, 7, 11, 2, 12, 19, 14, 12, 20, 22, 11, 19, 10, 12, 16, 23, 14, 16, 23, 19, 16, 1, 13, 16, 8, 12, 19, 22, 11, 19, 21, 11, 19, 4, 10, 16, 8, 9, 16, 2, 20, 16, 4, 20, 15, 8, 18, 15, 8, 17, 15, 2, 12, 15, 4, 12, 15, 8, 12, 15, 8, 12, 11, 2, 20, 20, 4, 11, 11, 6, 19, 19, 8, 11, 11, 2, 19, 19, 4, 11, 11, 6, 19, 19, 8, 11, 11, 2, 19, 19, 4, 11, 11, 6, 19, 19, 8, 11, 11},

		{2, 12, 12, 21, 17, 18, 21, 13, 17, 2, 16, 14, 23, 12, 15, 12, 14, 15, 22, 11, 15, 20, 14, 11, 12, 14, 11, 12, 19, 12, 14, 13, 15, 9, 13, 15, 6, 14, 14, 10, 13, 16, 22, 17, 17, 8, 17, 16, 7, 14, 16, 22, 17, 13, 6, 14, 14, 5, 17, 17, 22, 14, 14, 22, 17, 13, 6, 17, 13, 4, 17, 13, 21, 17, 13, 4, 17, 6, 13, 22, 13, 13, 2, 17, 13, 22, 13, 4, 17, 6, 13, 22, 13, 7, 17, 17, 22, 13, 17, 22, 13, 18, 22, 13, 17, 22, 16, 14, 23, 12, 10, 22, 17, 15, 5, 11, 15, 4, 14, 17, 21, 14, 17, 4, 19, 15, 22, 20, 15, 22, 9, 15, 22, 14, 16, 22, 14, 16, 22, 17, 16, 3, 17, 16, 22, 14, 16, 4, 17, 17, 6, 14, 14, 4, 17, 17, 6, 14, 14, 4, 17, 17, 6, 13, 13, 4, 17, 17, 2, 13, 13, 4, 17, 17, 6, 13, 13, 4, 17, 17, 1, 13, 13, 4, 17, 17, 6, 13, 13, 8, 17, 17},

		{1, 14, 11, 21, 19, 17, 22, 13, 18, 21, 18, 16, 20, 15, 17, 23, 17, 15, 23, 20, 19, 23, 15, 18, 23, 11, 15, 23, 12, 11, 6, 15, 19, 22, 19, 15, 1, 13, 16, 3, 13, 16, 5, 11, 16, 7, 13, 16, 1, 17, 16, 4, 13, 15, 6, 11, 11, 8, 19, 19, 1, 13, 6, 13, 3, 17, 6, 19, 19, 7, 17, 17, 22, 13, 6, 13, 3, 11, 6, 19, 19, 7, 17, 1, 17, 8, 19, 22, 13, 13, 6, 11, 11, 7, 13, 13, 22, 14, 11, 21, 19, 17, 22, 13, 18, 8, 18, 9, 23, 16, 10, 23, 17, 15, 23, 20, 19, 23, 15, 18, 23, 11, 15, 23, 12, 11, 23, 15, 19, 22, 19, 15, 2, 13, 16, 4, 13, 16, 6, 11, 16, 8, 13, 16, 2, 17, 16, 4, 13, 15, 6, 11, 11, 8, 19, 19, 2, 13, 13, 4, 17, 17, 6, 19, 19, 8, 17, 17, 2, 13, 13, 4, 11, 11, 6, 19, 19, 8, 17, 17, 2, 19, 19, 4, 13, 13, 5, 11, 11, 8, 13, 13},
	}

	///NG combo統計表初始///
	NGresult.NGComboStatistic = [symbolamount][comboresultnum]int{}

	return NGresult

}

func FGTablefunc() FGTable {

	// xlsx, err := excelize.OpenFile("/Users/terry_hsiesh/go/game/doublegood/parsheet/fgparsheet.xlsx")
	// // fmt.Println("free useexcel")
	// // fmt.Println("誰在調用", PrintCallfuncName(), PrintCallfuncNameUpper())
	// // fmt.Println()
	// if err != nil {
	// 	fmt.Println(err)
	// 	os.Exit(1)
	// }
	var FGresult = FGTable{}

	///FG轉輪表ＲＴＰ95///
	//FGresult.FGStriTablertp95 = Getexcelparsheet(xlsx, "95")
	FGresult.FGStriTablertp95 = [reelamount][]int{
		{2, 18, 20, 6, 14, 14, 6, 18, 14, 2, 18, 18, 23, 10, 14, 8, 18, 18, 8, 18, 18, 6, 14, 14, 8, 18, 18, 2, 18, 18, 6, 14, 18, 8, 14, 18, 2, 14, 18, 8, 14, 14, 8, 10, 18, 6, 18, 10, 2, 14, 18, 6, 14, 14, 6, 18, 18, 8, 14, 10, 2, 12, 10, 8, 16, 10, 6, 18, 14, 8, 18, 10, 23, 14, 10, 6, 18, 18, 8, 14, 10, 4, 14, 10, 8, 18, 18, 2, 14, 14, 6, 14, 18, 8, 14, 14, 2, 10, 18, 2, 10, 14, 8, 18, 18, 6, 14, 10, 2, 14, 18, 8, 14, 14, 6, 18, 18, 8, 14, 10},
		{8, 12, 10, 4, 12, 8, 10, 6, 16, 8, 10, 12, 23, 10, 20, 23, 10, 12, 23, 10, 20, 23, 10, 12, 6, 20, 12, 8, 12, 12, 8, 20, 10, 2, 16, 16, 6, 10, 20, 18, 4, 10, 6, 16, 10, 2, 14, 10, 8, 16, 10, 8, 20, 20, 6, 10, 20, 2, 20, 10, 8, 12, 20, 2, 10, 16, 6, 16, 16, 6, 10, 16, 23, 20, 20, 23, 12, 12, 23, 20, 20, 23, 16, 12, 22, 20, 12, 4, 12, 12, 6, 10, 20, 6, 16, 16, 12, 12, 20, 20, 12, 12, 6, 16, 16, 8, 20, 20, 2, 16, 20, 4, 20, 20, 6, 12, 20, 8, 20, 16},
		{2, 10, 12, 2, 10, 12, 22, 20, 20, 8, 20, 10, 23, 10, 4, 10, 8, 12, 16, 22, 20, 10, 6, 16, 8, 12, 10, 22, 12, 10, 2, 18, 10, 8, 16, 20, 6, 12, 12, 22, 10, 12, 6, 10, 12, 8, 12, 10, 6, 16, 2, 20, 20, 2, 12, 12, 4, 20, 22, 20, 6, 10, 2, 16, 6, 10, 2, 20, 12, 22, 12, 10, 23, 16, 22, 16, 8, 10, 22, 16, 8, 10, 6, 16, 10, 2, 16, 22, 20, 16, 22, 20, 12, 22, 16, 20, 22, 10, 12, 22, 20, 16, 6, 12, 8, 10, 2, 20, 6, 10, 2, 14, 8, 10, 6, 12, 8, 10, 6, 10},
		{6, 12, 12, 6, 16, 16, 8, 14, 16, 2, 16, 20, 23, 20, 16, 8, 20, 20, 6, 16, 16, 6, 16, 16, 8, 20, 20, 8, 16, 16, 6, 20, 14, 2, 16, 16, 6, 16, 18, 6, 20, 14, 6, 20, 16, 8, 16, 20, 4, 20, 20, 6, 20, 12, 4, 18, 16, 8, 16, 20, 2, 20, 20, 8, 16, 16, 8, 10, 12, 8, 10, 20, 23, 10, 12, 4, 12, 10, 22, 10, 12, 4, 12, 10, 22, 18, 10, 22, 10, 14, 22, 12, 14, 22, 10, 16, 22, 10, 18, 22, 12, 14, 22, 10, 16, 22, 12, 10, 4, 20, 20, 22, 20, 12, 22, 18, 6, 10, 8, 10},
		{18, 14, 14, 4, 20, 14, 23, 14, 14, 23, 18, 18, 23, 10, 20, 4, 20, 20, 10, 16, 14, 2, 10, 20, 4, 10, 18, 6, 20, 16, 6, 20, 16, 8, 20, 12, 6, 12, 12, 2, 20, 12, 4, 12, 20, 4, 12, 20, 4, 16, 12, 12, 16, 20, 4, 18, 20, 12, 16, 20, 8, 16, 14, 4, 16, 14, 23, 16, 12, 23, 18, 16, 23, 16, 12, 8, 16, 20, 8, 16, 10, 8, 12, 20, 22, 14, 16, 4, 16, 20, 4, 16, 18, 4, 18, 16, 4, 16, 12, 4, 20, 16, 6, 12, 16, 4, 18, 20, 2, 14, 12, 12, 20, 20, 6, 18, 20, 12, 16, 20},
	}
	///FG轉輪表ＲＴＰ965///
	//FGresult.FGStriTablertp965 = Getexcelparsheet(xlsx, "965")

	FGresult.FGStriTablertp965 = [reelamount][]int{
		{2, 18, 20, 6, 14, 14, 6, 18, 14, 2, 18, 18, 23, 10, 14, 8, 18, 18, 8, 18, 18, 6, 14, 14, 8, 18, 18, 2, 18, 18, 6, 14, 18, 8, 14, 18, 2, 14, 18, 8, 14, 14, 8, 10, 18, 6, 18, 10, 2, 14, 18, 6, 14, 14, 6, 18, 18, 8, 14, 10, 2, 12, 10, 8, 16, 10, 6, 18, 14, 8, 18, 10, 23, 14, 10, 6, 18, 18, 8, 14, 10, 4, 14, 10, 8, 18, 18, 2, 14, 14, 6, 14, 18, 8, 14, 14, 2, 10, 18, 2, 10, 14, 8, 18, 18, 6, 14, 10, 2, 14, 18, 8, 14, 14, 6, 18, 18, 8, 14, 10},

		{8, 12, 10, 4, 12, 8, 10, 6, 16, 8, 10, 12, 23, 10, 20, 23, 10, 12, 23, 10, 20, 23, 10, 12, 6, 20, 12, 8, 12, 12, 8, 20, 10, 2, 16, 16, 6, 10, 20, 18, 4, 10, 6, 16, 10, 2, 14, 10, 8, 16, 10, 8, 20, 20, 6, 10, 20, 2, 20, 10, 8, 12, 20, 2, 10, 16, 6, 16, 16, 6, 10, 16, 23, 20, 20, 23, 12, 12, 23, 20, 20, 23, 16, 12, 22, 20, 12, 4, 12, 12, 6, 10, 20, 6, 16, 16, 12, 12, 20, 20, 12, 12, 6, 16, 16, 8, 20, 20, 2, 16, 20, 4, 20, 20, 6, 12, 20, 8, 20, 16},

		{2, 10, 12, 2, 10, 12, 22, 20, 20, 8, 20, 10, 23, 10, 4, 10, 8, 12, 16, 22, 20, 10, 6, 16, 8, 12, 10, 22, 12, 10, 2, 18, 10, 8, 16, 20, 6, 12, 12, 22, 10, 12, 6, 10, 12, 8, 12, 10, 6, 16, 2, 20, 20, 2, 12, 12, 4, 20, 22, 20, 6, 10, 2, 16, 6, 10, 2, 20, 12, 22, 12, 10, 23, 16, 22, 16, 8, 10, 22, 16, 8, 10, 6, 16, 10, 2, 16, 22, 20, 16, 22, 20, 12, 22, 16, 20, 22, 10, 12, 22, 20, 16, 6, 12, 8, 10, 2, 20, 6, 10, 2, 14, 8, 10, 6, 12, 8, 10, 6, 10},

		{6, 12, 12, 6, 16, 16, 8, 14, 16, 2, 16, 20, 23, 20, 16, 8, 20, 20, 6, 16, 16, 6, 16, 16, 8, 20, 20, 8, 16, 16, 6, 20, 14, 2, 16, 16, 6, 16, 18, 6, 20, 14, 6, 20, 16, 8, 16, 20, 4, 20, 20, 6, 20, 12, 4, 18, 16, 8, 16, 20, 2, 20, 20, 8, 16, 16, 8, 10, 12, 8, 10, 20, 23, 10, 12, 4, 12, 10, 22, 10, 12, 4, 12, 10, 22, 18, 10, 22, 10, 14, 22, 12, 14, 22, 10, 16, 22, 10, 18, 22, 12, 14, 22, 10, 16, 22, 12, 10, 4, 20, 20, 22, 20, 12, 22, 18, 6, 10, 8, 10},

		{18, 14, 14, 4, 20, 14, 23, 14, 14, 23, 18, 18, 23, 10, 20, 4, 20, 20, 10, 16, 14, 2, 10, 20, 4, 10, 18, 6, 20, 16, 6, 20, 16, 8, 20, 12, 6, 12, 12, 2, 20, 12, 4, 12, 20, 4, 12, 20, 4, 16, 12, 12, 16, 20, 4, 18, 20, 12, 16, 20, 8, 16, 14, 4, 16, 14, 23, 16, 12, 23, 18, 16, 23, 16, 12, 8, 16, 20, 8, 16, 10, 8, 12, 20, 22, 14, 16, 4, 16, 20, 4, 16, 18, 4, 18, 16, 4, 16, 12, 4, 20, 16, 6, 12, 16, 4, 18, 20, 2, 14, 12, 12, 20, 20, 6, 18, 20, 12, 16, 20},
	}
	///FG轉輪表ＲＴＰ98///
	//FGresult.FGStriTablertp98 = Getexcelparsheet(xlsx, "98")

	///FG轉輪表ＲＴＰ99///
	//FGresult.FGStriTablertp99 = Getexcelparsheet(xlsx, "99")

	FGresult.FGStriTablertp99 = [reelamount][]int{
		{2, 18, 20, 6, 14, 14, 6, 18, 14, 2, 18, 18, 23, 10, 14, 8, 18, 18, 8, 18, 18, 6, 14, 14, 8, 18, 18, 2, 18, 18, 6, 14, 18, 8, 14, 18, 2, 14, 18, 8, 14, 14, 8, 10, 18, 6, 18, 10, 2, 14, 18, 6, 14, 14, 6, 18, 18, 8, 14, 10, 2, 12, 10, 8, 16, 10, 6, 18, 14, 8, 18, 10, 23, 14, 10, 6, 18, 18, 8, 14, 10, 4, 14, 10, 8, 18, 18, 2, 14, 14, 6, 14, 18, 8, 14, 14, 2, 10, 18, 2, 10, 14, 8, 18, 18, 6, 14, 10, 2, 14, 18, 8, 14, 14, 6, 18, 18, 8, 14, 10},
		{8, 12, 10, 4, 12, 8, 10, 6, 16, 8, 10, 12, 23, 10, 20, 23, 10, 12, 23, 10, 20, 23, 10, 12, 6, 20, 12, 8, 12, 12, 8, 20, 10, 2, 16, 16, 6, 10, 20, 18, 4, 10, 6, 16, 10, 2, 14, 10, 8, 16, 10, 8, 20, 20, 6, 10, 20, 2, 20, 10, 8, 12, 20, 2, 10, 16, 6, 16, 16, 6, 10, 16, 23, 20, 20, 23, 12, 12, 23, 20, 20, 23, 16, 12, 22, 20, 12, 4, 12, 12, 6, 10, 20, 6, 16, 16, 12, 12, 20, 20, 12, 12, 6, 16, 16, 8, 20, 20, 2, 16, 20, 4, 20, 20, 6, 12, 20, 8, 20, 16},
		{2, 10, 12, 2, 10, 12, 22, 20, 20, 8, 20, 10, 23, 10, 4, 10, 8, 12, 16, 22, 20, 10, 6, 16, 8, 12, 10, 22, 12, 10, 2, 18, 10, 8, 16, 20, 6, 12, 12, 22, 10, 12, 6, 10, 12, 8, 12, 10, 6, 16, 2, 20, 20, 2, 12, 12, 4, 20, 22, 20, 6, 10, 2, 16, 6, 10, 2, 20, 12, 22, 12, 10, 23, 16, 22, 16, 8, 10, 22, 16, 8, 10, 6, 16, 10, 2, 16, 22, 20, 16, 22, 20, 12, 22, 16, 20, 22, 10, 12, 22, 20, 16, 6, 12, 8, 10, 2, 20, 6, 10, 2, 14, 8, 10, 6, 12, 8, 10, 6, 10},
		{6, 12, 12, 6, 16, 16, 8, 14, 16, 2, 16, 20, 23, 20, 16, 8, 20, 20, 6, 16, 16, 6, 16, 16, 8, 20, 20, 8, 16, 16, 6, 20, 14, 2, 16, 16, 6, 16, 18, 6, 20, 14, 6, 20, 16, 8, 16, 20, 4, 20, 20, 6, 20, 12, 4, 18, 16, 8, 16, 20, 2, 20, 20, 8, 16, 16, 8, 10, 12, 8, 10, 20, 23, 10, 12, 4, 12, 10, 22, 10, 12, 4, 12, 10, 22, 18, 10, 22, 10, 14, 22, 12, 14, 22, 10, 16, 22, 10, 18, 22, 12, 14, 22, 10, 16, 22, 12, 10, 4, 20, 20, 22, 20, 12, 22, 18, 6, 10, 8, 10},
		{18, 14, 14, 4, 20, 14, 23, 14, 14, 23, 18, 18, 23, 10, 20, 4, 20, 20, 10, 16, 14, 2, 10, 20, 4, 10, 18, 6, 20, 16, 6, 20, 16, 8, 20, 12, 6, 12, 12, 2, 20, 12, 4, 12, 20, 4, 12, 20, 4, 16, 12, 12, 16, 20, 4, 18, 20, 12, 16, 20, 8, 16, 14, 4, 16, 14, 23, 16, 12, 23, 18, 16, 23, 16, 12, 8, 16, 20, 8, 16, 10, 8, 12, 20, 22, 14, 16, 4, 16, 20, 4, 16, 18, 4, 18, 16, 4, 16, 12, 4, 20, 16, 6, 12, 16, 4, 18, 20, 2, 14, 12, 12, 20, 20, 6, 18, 20, 12, 16, 20},
	}

	/// 權重表///
	FGresult.FGWeightTable = [][]int{}

	///FG combo統計表初始///
	FGresult.FGComboStatistic = [symbolamount][comboresultnum]int{}

	return FGresult

}

func BGTablefunc() BGTable {
	var BGresult = BGTable{}

	///BG轉輪表///
	BGresult.BGStriTable = [][]int{}

	///BG 權重表///
	BGresult.BGWeightTable = [][]int{}

	///BG combo統計表初始///
	BGresult.BGComboStatistic = [symbolamount][comboresultnum]int{}

	return BGresult

}

func Getexcelparsheet() {
	xlsxfg, err := excelize.OpenFile(info.Excelroutiefg)
	// fmt.Println("free useexcel")
	// fmt.Println("誰在調用", PrintCallfuncName(), PrintCallfuncNameUpper())
	// fmt.Println()
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	xlsxng, err := excelize.OpenFile(info.Excelroutieng)
	// fmt.Println("free useexcel")
	// fmt.Println("誰在調用", PrintCallfuncName(), PrintCallfuncNameUpper())
	// fmt.Println()
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	var rtproutie = []string{"95", "965", "99"}

	for i := 0; i < len(rtproutie); i++ {
		rowng, err := xlsxng.GetRows("rtp" + rtproutie[i])
		if err != nil {
			fmt.Println(err)
			os.Exit(1)
		}

		stritable := [reelamount][]int{}

		for i := 0; i < len(rowng); i++ {
			for k := 0; k < len(rowng[i]); k++ {
				if rowng[i][k] == "" {
					continue
				} else {
					element, err := strconv.Atoi(rowng[i][k])
					if err != nil {
						panic(err)
					}
					stritable[k] = append(stritable[k], element)
				}

			}
		}
		switch rtproutie[i] {
		case "95":
			temp := &NGStriTablertp95
			*temp = stritable
		case "965":
			temp := &NGStriTablertp965
			*temp = stritable
		case "99":
			temp := &NGStriTablertp99
			*temp = stritable
		}

	}

	for i := 0; i < len(rtproutie); i++ {
		rowfg, err := xlsxfg.GetRows("rtp" + rtproutie[i])
		if err != nil {
			fmt.Println(err)
			os.Exit(1)
		}

		stritable := [reelamount][]int{}

		for i := 0; i < len(rowfg); i++ {
			for k := 0; k < len(rowfg[i]); k++ {
				if rowfg[i][k] == "" {
					continue
				} else {
					element, err := strconv.Atoi(rowfg[i][k])
					if err != nil {
						panic(err)
					}
					stritable[k] = append(stritable[k], element)
				}

			}
		}
		switch rtproutie[i] {
		case "95":
			temp := &FGStriTablertp95
			*temp = stritable
		case "965":
			temp := &FGStriTablertp965
			*temp = stritable
		case "99":
			temp := &FGStriTablertp99
			*temp = stritable
		}

	}

}

func PrintCallfuncName() string {
	pc, _, _, _ := runtime.Caller(1)
	return runtime.FuncForPC(pc).Name()
}

func PrintCallfuncNameUpper() string {
	pc, _, _, _ := runtime.Caller(2)
	return runtime.FuncForPC(pc).Name()
}
